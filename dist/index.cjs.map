{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * A Branded Type for values parseable to number.\n */\nexport type NumberParseable = (number | string | boolean) & {\n  readonly isNumberParseble: unique symbol;\n};\n\n/**\n * Check if value is parseable to number.\n * @example\n * ```js\n * isNumberParseable('AAAA');\n * //=> false\n *\n * isNumberParseable('100');\n * //=> true\n *\n * if (!isNumberParseable(value))\n *   throw new Error('Value can\\'t be parseable to `Number`.')\n * return Number(value);\n * ```\n * @param value - An `unknown` value to be checked.\n */\nexport const isNumberParseable = (value: unknown): value is NumberParseable =>\n  !Number.isNaN(Number(value));\n\nexport const holidays: { [key: string]: string } = {\n  \"2023-01-01\": \"元旦\",\n  \"2023-01-02\": \"開國紀念日\",\n  \"2023-01-20\": \"春節\",\n  \"2023-01-21\": \"春節\",\n  \"2023-01-22\": \"春節\",\n  \"2023-01-23\": \"春節\",\n  \"2023-01-24\": \"春節\",\n  \"2023-01-25\": \"春節\",\n  \"2023-01-26\": \"春節\",\n  \"2023-01-27\": \"春節\",\n  \"2023-02-27\": \"228\",\n  \"2023-02-28\": \"228\",\n  \"2023-04-03\": \"兒童節\",\n  \"2023-04-04\": \"兒童節\",\n  \"2023-04-05\": \"清明節\",\n  \"2023-05-01\": \"勞動節\",\n  \"2023-06-22\": \"端午節\",\n  \"2023-06-23\": \"端午節\",\n  \"2023-09-29\": \"中秋節\",\n  \"2023-10-09\": \"國慶日\",\n  \"2023-10-10\": \"國慶日\",\n  \"2024-01-01\": \"元旦\",\n  \"2024-02-09\": \"春節\",\n  \"2024-02-10\": \"春節\",\n  \"2024-02-11\": \"春節\",\n  \"2024-02-12\": \"春節\",\n  \"2024-02-28\": \"228\",\n  \"2024-04-04\": \"兒童節\",\n  \"2024-05-01\": \"勞動節\",\n  \"2024-06-10\": \"端午節\",\n  \"2024-09-16\": \"中秋節\",\n  \"2024-09-17\": \"中秋節\",\n  \"2024-10-10\": \"國慶日\",\n  \"2024-10-11\": \"國慶日\",\n};\n\n/**\n * Calculate the duration between two time strings.\n *\n * @param startTime\n * @param endTime\n * @returns {number}\n */\nexport const calculateDuration = (\n  startTime: string,\n  endTime: string,\n): number => {\n  const [startHour, startMinute] = startTime.split(\":\").map(Number);\n  const [endHour, endMinute] = endTime.split(\":\").map(Number);\n\n  const startDate = new Date(2000, 0, 1, startHour, startMinute); // Date here is irrelevant\n  const endDate = new Date(2000, 0, 1, endHour, endMinute); // Date here is irrelevant\n\n  const differenceInMinutes =\n    (endDate.getTime() - startDate.getTime()) / (1000 * 60);\n  return differenceInMinutes;\n};\n\n/**\n * Convert Date objects to strings in yyyy-MM-dd format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate = (date: Date): string => {\n  return `${date.getFullYear()}-${(date.getMonth() + 1)\n    .toString()\n    .padStart(2, \"0\")}-${date.getDate().toString().padStart(2, \"0\")}`;\n};\n\n/**\n * Convert Date objects to strings in HH:mm format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate2HHmm = (date: Date): string => {\n  return `${date.getHours().toString().padStart(2, \"0\")}:${date\n    .getMinutes()\n    .toString()\n    .padStart(2, \"0\")}`;\n};\n\n/**\n * Get current year and month\n *\n * @returns { { currentYear: string; currentMonth: string } }\n */\nexport const getCurrentYearMonth = (): {\n  currentYear: string;\n  currentMonth: string;\n} => {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear().toString();\n  const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, \"0\");\n  return { currentYear, currentMonth };\n};\n"],"names":[],"mappings":";;;;;;;;AAOA;;;;;;;;;;;;;;;AAeG;AACI,IAAM,iBAAiB,GAAG,UAAC,KAAc,EAAA;IAC9C,OAAA,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;AAA5B,EAA6B;AAElB,IAAA,QAAQ,GAA8B;AACjD,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,OAAO;AACrB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;AACnB,IAAA,YAAY,EAAE,KAAK;EACnB;AAEF;;;;;;AAMG;AACU,IAAA,iBAAiB,GAAG,UAC/B,SAAiB,EACjB,OAAe,EAAA;AAET,IAAA,IAAA,KAA2B,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAA1D,SAAS,QAAA,EAAE,WAAW,QAAoC,CAAC;AAC5D,IAAA,IAAA,KAAuB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAApD,OAAO,QAAA,EAAE,SAAS,QAAkC,CAAC;AAE5D,IAAA,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;AAC/D,IAAA,IAAM,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AAEzD,IAAA,IAAM,mBAAmB,GACvB,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC;AAC1D,IAAA,OAAO,mBAAmB,CAAC;AAC7B,EAAE;AAEF;;;;;AAKG;AACI,IAAM,UAAU,GAAG,UAAC,IAAU,EAAA;AACnC,IAAA,OAAO,EAAG,CAAA,MAAA,CAAA,IAAI,CAAC,WAAW,EAAE,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;AACjD,SAAA,QAAQ,EAAE;SACV,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAI,GAAA,CAAA,CAAA,MAAA,CAAA,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAE,CAAC;AACtE,EAAE;AAEF;;;;;AAKG;AACI,IAAM,eAAe,GAAG,UAAC,IAAU,EAAA;AACxC,IAAA,OAAO,UAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,cAAI,IAAI;AAC1D,SAAA,UAAU,EAAE;AACZ,SAAA,QAAQ,EAAE;AACV,SAAA,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAE,CAAC;AACxB,EAAE;AAEF;;;;AAIG;AACU,IAAA,mBAAmB,GAAG,YAAA;AAIjC,IAAA,IAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;IAC/B,IAAM,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC;IACzD,IAAM,YAAY,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAC9E,IAAA,OAAO,EAAE,WAAW,EAAA,WAAA,EAAE,YAAY,EAAA,YAAA,EAAE,CAAC;AACvC;;;;;;;;;"}