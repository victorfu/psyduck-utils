{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * A Branded Type for values parseable to number.\n */\nexport type NumberParseable = (number | string | boolean) & {\n  readonly isNumberParseble: unique symbol;\n};\n\n/**\n * Check if value is parseable to number.\n * @example\n * ```js\n * isNumberParseable('AAAA');\n * //=> false\n *\n * isNumberParseable('100');\n * //=> true\n *\n * if (!isNumberParseable(value))\n *   throw new Error('Value can\\'t be parseable to `Number`.')\n * return Number(value);\n * ```\n * @param value - An `unknown` value to be checked.\n */\nexport const isNumberParseable = (value: unknown): value is NumberParseable =>\n  !Number.isNaN(Number(value));\n\nexport const holidays: { [key: string]: string } = {\n  \"2023-01-01\": \"元旦\",\n  \"2023-01-02\": \"開國紀念日\",\n  \"2023-01-20\": \"春節\",\n  \"2023-01-21\": \"春節\",\n  \"2023-01-22\": \"春節\",\n  \"2023-01-23\": \"春節\",\n  \"2023-01-24\": \"春節\",\n  \"2023-01-25\": \"春節\",\n  \"2023-01-26\": \"春節\",\n  \"2023-01-27\": \"春節\",\n  \"2023-02-27\": \"228\",\n  \"2023-02-28\": \"228\",\n  \"2023-04-03\": \"兒童節\",\n  \"2023-04-04\": \"兒童節\",\n  \"2023-04-05\": \"清明節\",\n  \"2023-05-01\": \"勞動節\",\n  \"2023-06-22\": \"端午節\",\n  \"2023-06-23\": \"端午節\",\n  \"2023-09-29\": \"中秋節\",\n  \"2023-10-09\": \"國慶日\",\n  \"2023-10-10\": \"國慶日\",\n  \"2024-01-01\": \"元旦\",\n  \"2024-02-08\": \"春節\",\n  \"2024-02-09\": \"春節\",\n  \"2024-02-10\": \"春節\",\n  \"2024-02-11\": \"春節\",\n  \"2024-02-12\": \"春節\",\n  \"2024-02-13\": \"春節\",\n  \"2024-02-14\": \"春節\",\n  \"2024-02-28\": \"228\",\n  \"2024-04-04\": \"清明節\",\n  \"2024-04-05\": \"清明節\",\n  \"2024-04-06\": \"清明節\",\n  \"2024-04-07\": \"清明節\",\n  \"2024-05-01\": \"勞動節\",\n  \"2024-06-09\": \"端午節\",\n  \"2024-06-10\": \"端午節\",\n  \"2024-09-17\": \"中秋節\",\n  \"2024-10-10\": \"國慶日\",\n};\n\n/**\n * Calculate the duration between two time strings.\n *\n * @param startTime\n * @param endTime\n * @returns {number}\n */\nexport const calculateDuration = (\n  startTime: string,\n  endTime: string,\n): number => {\n  const [startHour, startMinute] = startTime.split(\":\").map(Number);\n  const [endHour, endMinute] = endTime.split(\":\").map(Number);\n\n  const startDate = new Date(2000, 0, 1, startHour, startMinute); // Date here is irrelevant\n  const endDate = new Date(2000, 0, 1, endHour, endMinute); // Date here is irrelevant\n\n  const differenceInMinutes =\n    (endDate.getTime() - startDate.getTime()) / (1000 * 60);\n  return differenceInMinutes;\n};\n\n/**\n * Convert Date objects to strings in yyyy-MM-dd format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate = (date: Date): string => {\n  return `${date.getFullYear()}-${(date.getMonth() + 1)\n    .toString()\n    .padStart(2, \"0\")}-${date.getDate().toString().padStart(2, \"0\")}`;\n};\n\n/**\n * Convert Date objects to strings in yyyy-MM-dd format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate2yyyyMMdd = (date: Date): string => {\n  return formatDate(date);\n};\n\n/**\n * Convert Date objects to strings in HH:mm format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate2HHmm = (date: Date): string => {\n  return `${date.getHours().toString().padStart(2, \"0\")}:${date\n    .getMinutes()\n    .toString()\n    .padStart(2, \"0\")}`;\n};\n\n/**\n * Get current year and month\n *\n * @returns { { currentYear: string; currentMonth: string } }\n */\nexport const getCurrentYearMonth = (): {\n  currentYear: string;\n  currentMonth: string;\n} => {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear().toString();\n  const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, \"0\");\n  return { currentYear, currentMonth };\n};\n\n/**\n * Get the random time between start and end time\n *\n * @param date\n * @param start\n * @param end\n * @returns {Date}\n */\nexport const getRandomTime = (date: Date, start: string, end: string): Date => {\n  // Validate input date\n  if (\n    Object.prototype.toString.call(date) !== \"[object Date]\" ||\n    isNaN(date.getTime())\n  ) {\n    throw new Error(\"Invalid date object provided.\");\n  }\n\n  // Validate and extract hours and minutes from start and end times\n  const timeRegex = /^([01]?\\d|2[0-3]):([0-5]\\d)$/;\n  if (!timeRegex.test(start) || !timeRegex.test(end)) {\n    throw new Error(\"Invalid time format. Expected HH:mm.\");\n  }\n\n  const startParts = start.split(\":\").map(Number);\n  const endParts = end.split(\":\").map(Number);\n\n  if (startParts.length !== 2 || endParts.length !== 2) {\n    throw new Error(\"Invalid time format. Ensure to use HH:mm.\");\n  }\n\n  const startHour = startParts[0];\n  const startMinute = startParts[1];\n  const endHour = endParts[0];\n  const endMinute = endParts[1];\n\n  // Validate start time is before end time\n  if (\n    startHour === undefined ||\n    endHour === undefined ||\n    startMinute === undefined ||\n    endMinute === undefined ||\n    startHour > endHour ||\n    (startHour === endHour && startMinute >= endMinute)\n  ) {\n    throw new Error(\"Start time must be before end time.\");\n  }\n\n  // Convert times to minutes\n  const startInMinutes = startHour * 60 + startMinute;\n  const endInMinutes = endHour * 60 + endMinute;\n\n  // Get a random minute between startInMinutes and endInMinutes\n  const randomMinute =\n    Math.floor(Math.random() * (endInMinutes - startInMinutes + 1)) +\n    startInMinutes;\n\n  const randomHour = Math.floor(randomMinute / 60);\n  const remainderMinute = randomMinute % 60;\n\n  // Create new Date object with random time\n  const randomDate = new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    randomHour,\n    remainderMinute,\n  );\n\n  return randomDate;\n};\n"],"names":[],"mappings":"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"}