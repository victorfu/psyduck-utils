{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * A Branded Type for values parseable to number.\n */\nexport type NumberParseable = (number | string | boolean) & {\n  readonly isNumberParseble: unique symbol;\n};\n\n/**\n * Check if value is parseable to number.\n * @example\n * ```js\n * isNumberParseable('AAAA');\n * //=> false\n *\n * isNumberParseable('100');\n * //=> true\n *\n * if (!isNumberParseable(value))\n *   throw new Error('Value can\\'t be parseable to `Number`.')\n * return Number(value);\n * ```\n * @param value - An `unknown` value to be checked.\n */\nexport const isNumberParseable = (value: unknown): value is NumberParseable =>\n  !Number.isNaN(Number(value));\n\nexport const holidays: { [key: string]: string } = {\n  \"2023-01-01\": \"元旦\",\n  \"2023-01-02\": \"開國紀念日\",\n  \"2023-01-20\": \"春節\",\n  \"2023-01-21\": \"春節\",\n  \"2023-01-22\": \"春節\",\n  \"2023-01-23\": \"春節\",\n  \"2023-01-24\": \"春節\",\n  \"2023-01-25\": \"春節\",\n  \"2023-01-26\": \"春節\",\n  \"2023-01-27\": \"春節\",\n  \"2023-02-27\": \"228\",\n  \"2023-02-28\": \"228\",\n  \"2023-04-03\": \"兒童節\",\n  \"2023-04-04\": \"兒童節\",\n  \"2023-04-05\": \"清明節\",\n  \"2023-05-01\": \"勞動節\",\n  \"2023-06-22\": \"端午節\",\n  \"2023-06-23\": \"端午節\",\n  \"2023-09-29\": \"中秋節\",\n  \"2023-10-09\": \"國慶日\",\n  \"2023-10-10\": \"國慶日\",\n  \"2024-01-01\": \"元旦\",\n  \"2024-02-09\": \"春節\",\n  \"2024-02-10\": \"春節\",\n  \"2024-02-11\": \"春節\",\n  \"2024-02-12\": \"春節\",\n  \"2024-02-28\": \"228\",\n  \"2024-04-04\": \"兒童節\",\n  \"2024-05-01\": \"勞動節\",\n  \"2024-06-10\": \"端午節\",\n  \"2024-09-16\": \"中秋節\",\n  \"2024-09-17\": \"中秋節\",\n  \"2024-10-10\": \"國慶日\",\n  \"2024-10-11\": \"國慶日\",\n};\n\n/**\n * Calculate the duration between two time strings.\n *\n * @param startTime\n * @param endTime\n * @returns {number}\n */\nexport const calculateDuration = (\n  startTime: string,\n  endTime: string,\n): number => {\n  const [startHour, startMinute] = startTime.split(\":\").map(Number);\n  const [endHour, endMinute] = endTime.split(\":\").map(Number);\n\n  const startDate = new Date(2000, 0, 1, startHour, startMinute); // Date here is irrelevant\n  const endDate = new Date(2000, 0, 1, endHour, endMinute); // Date here is irrelevant\n\n  const differenceInMinutes =\n    (endDate.getTime() - startDate.getTime()) / (1000 * 60);\n  return differenceInMinutes;\n};\n\n/**\n * Convert Date objects to strings in yyyy-MM-dd format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate = (date: Date): string => {\n  return `${date.getFullYear()}-${(date.getMonth() + 1)\n    .toString()\n    .padStart(2, \"0\")}-${date.getDate().toString().padStart(2, \"0\")}`;\n};\n\n/**\n * Convert Date objects to strings in HH:mm format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate2HHmm = (date: Date): string => {\n  return `${date.getHours().toString().padStart(2, \"0\")}:${date\n    .getMinutes()\n    .toString()\n    .padStart(2, \"0\")}`;\n};\n\n/**\n * Get current year and month\n *\n * @returns { { currentYear: string; currentMonth: string } }\n */\nexport const getCurrentYearMonth = (): {\n  currentYear: string;\n  currentMonth: string;\n} => {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear().toString();\n  const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, \"0\");\n  return { currentYear, currentMonth };\n};\n"],"names":["startTime","endTime","_a","split","map","Number","startHour","startMinute","_b","endHour","endMinute","startDate","Date","getTime","date","concat","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","currentDate","currentYear","currentMonth","value","isNaN"],"mappings":";;;;;wQAsEiC,SAC/BA,EACAC,GAEM,IAAAC,EAA2BF,EAAUG,MAAM,KAAKC,IAAIC,QAAnDC,OAAWC,OACZC,EAAuBP,EAAQE,MAAM,KAAKC,IAAIC,QAA7CI,OAASC,OAEVC,EAAY,IAAIC,KAAK,IAAM,EAAG,EAAGN,EAAWC,GAKlD,OAJgB,IAAIK,KAAK,IAAM,EAAG,EAAGH,EAASC,GAGnCG,UAAYF,EAAUE,WAAS,GAE5C,eAQ0B,SAACC,GACzB,MAAO,GAAGC,OAAAD,EAAKE,cAAa,KAAAD,QAAKD,EAAKG,WAAa,GAChDC,WACAC,SAAS,EAAG,KAAQ,KAAAJ,OAAAD,EAAKM,UAAUF,WAAWC,SAAS,EAAG,KAC/D,oBAQ+B,SAACL,GAC9B,MAAO,UAAGA,EAAKO,WAAWH,WAAWC,SAAS,EAAG,iBAAQL,EACtDQ,aACAJ,WACAC,SAAS,EAAG,KACjB,wBAOmC,WAIjC,IAAMI,EAAc,IAAIX,KAGxB,MAAO,CAAEY,YAFWD,EAAYP,cAAcE,WAExBO,cADAF,EAAYN,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAE3E,aAjGmD,CACjD,aAAc,KACd,aAAc,QACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,2BArCiB,SAACO,GAChC,OAACrB,OAAOsB,MAAMtB,OAAOqB,GAArB"}