{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * A Branded Type for values parseable to number.\n */\nexport type NumberParseable = (number | string | boolean) & {\n  readonly isNumberParseble: unique symbol;\n};\n\n/**\n * Check if value is parseable to number.\n * @example\n * ```js\n * isNumberParseable('AAAA');\n * //=> false\n *\n * isNumberParseable('100');\n * //=> true\n *\n * if (!isNumberParseable(value))\n *   throw new Error('Value can\\'t be parseable to `Number`.')\n * return Number(value);\n * ```\n * @param value - An `unknown` value to be checked.\n */\nexport const isNumberParseable = (value: unknown): value is NumberParseable =>\n  !Number.isNaN(Number(value));\n\nexport const holidays: { [key: string]: string } = {\n  \"2023-01-01\": \"元旦\",\n  \"2023-01-02\": \"開國紀念日\",\n  \"2023-01-20\": \"春節\",\n  \"2023-01-21\": \"春節\",\n  \"2023-01-22\": \"春節\",\n  \"2023-01-23\": \"春節\",\n  \"2023-01-24\": \"春節\",\n  \"2023-01-25\": \"春節\",\n  \"2023-01-26\": \"春節\",\n  \"2023-01-27\": \"春節\",\n  \"2023-02-27\": \"228\",\n  \"2023-02-28\": \"228\",\n  \"2023-04-03\": \"兒童節\",\n  \"2023-04-04\": \"兒童節\",\n  \"2023-04-05\": \"清明節\",\n  \"2023-05-01\": \"勞動節\",\n  \"2023-06-22\": \"端午節\",\n  \"2023-06-23\": \"端午節\",\n  \"2023-09-29\": \"中秋節\",\n  \"2023-10-09\": \"國慶日\",\n  \"2023-10-10\": \"國慶日\",\n  \"2024-01-01\": \"元旦\",\n  \"2024-02-09\": \"春節\",\n  \"2024-02-10\": \"春節\",\n  \"2024-02-11\": \"春節\",\n  \"2024-02-12\": \"春節\",\n  \"2024-02-28\": \"228\",\n  \"2024-04-04\": \"兒童節\",\n  \"2024-05-01\": \"勞動節\",\n  \"2024-06-10\": \"端午節\",\n  \"2024-09-16\": \"中秋節\",\n  \"2024-09-17\": \"中秋節\",\n  \"2024-10-10\": \"國慶日\",\n  \"2024-10-11\": \"國慶日\",\n};\n\n/**\n * Calculate the duration between two time strings.\n *\n * @param startTime\n * @param endTime\n * @returns {number}\n */\nexport const calculateDuration = (\n  startTime: string,\n  endTime: string,\n): number => {\n  const [startHour, startMinute] = startTime.split(\":\").map(Number);\n  const [endHour, endMinute] = endTime.split(\":\").map(Number);\n\n  const startDate = new Date(2000, 0, 1, startHour, startMinute); // Date here is irrelevant\n  const endDate = new Date(2000, 0, 1, endHour, endMinute); // Date here is irrelevant\n\n  const differenceInMinutes =\n    (endDate.getTime() - startDate.getTime()) / (1000 * 60);\n  return differenceInMinutes;\n};\n\n/**\n * Convert Date objects to strings in yyyy-MM-dd format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate = (date: Date): string => {\n  return `${date.getFullYear()}-${(date.getMonth() + 1)\n    .toString()\n    .padStart(2, \"0\")}-${date.getDate().toString().padStart(2, \"0\")}`;\n};\n\n/**\n * Convert Date objects to strings in yyyy-MM-dd format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate2yyyyMMdd = (date: Date): string => {\n  return formatDate(date);\n};\n\n/**\n * Convert Date objects to strings in HH:mm format\n *\n * @param date\n * @returns {string}\n */\nexport const formatDate2HHmm = (date: Date): string => {\n  return `${date.getHours().toString().padStart(2, \"0\")}:${date\n    .getMinutes()\n    .toString()\n    .padStart(2, \"0\")}`;\n};\n\n/**\n * Get current year and month\n *\n * @returns { { currentYear: string; currentMonth: string } }\n */\nexport const getCurrentYearMonth = (): {\n  currentYear: string;\n  currentMonth: string;\n} => {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear().toString();\n  const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, \"0\");\n  return { currentYear, currentMonth };\n};\n\n/**\n * Get the random time between start and end time\n *\n * @param date\n * @param start\n * @param end\n * @param timeZoneOffset\n * @returns {Date}\n */\nexport const getRandomTime = (\n  date: Date,\n  start: string,\n  end: string,\n  timeZoneOffset: number = 480, // Default to UTC+8\n): Date => {\n  // Validate input date\n  if (\n    Object.prototype.toString.call(date) !== \"[object Date]\" ||\n    isNaN(date.getTime())\n  ) {\n    throw new Error(\"Invalid date object provided.\");\n  }\n\n  // Validate and extract hours and minutes from start and end times\n  const timeRegex = /^([01]?\\d|2[0-3]):([0-5]\\d)$/;\n  if (!timeRegex.test(start) || !timeRegex.test(end)) {\n    throw new Error(\"Invalid time format. Expected HH:mm.\");\n  }\n\n  const startParts = start.split(\":\").map(Number);\n  const endParts = end.split(\":\").map(Number);\n\n  if (startParts.length !== 2 || endParts.length !== 2) {\n    throw new Error(\"Invalid time format. Ensure to use HH:mm.\");\n  }\n\n  const startHour = startParts[0];\n  const startMinute = startParts[1];\n  const endHour = endParts[0];\n  const endMinute = endParts[1];\n\n  // Validate start time is before end time\n  if (\n    startHour === undefined ||\n    endHour === undefined ||\n    startMinute === undefined ||\n    endMinute === undefined ||\n    startHour > endHour ||\n    (startHour === endHour && startMinute >= endMinute)\n  ) {\n    throw new Error(\"Start time must be before end time.\");\n  }\n\n  // Convert times to minutes\n  const startInMinutes = startHour * 60 + startMinute;\n  const endInMinutes = endHour * 60 + endMinute;\n\n  // Get a random minute between startInMinutes and endInMinutes\n  const randomMinute =\n    Math.floor(Math.random() * (endInMinutes - startInMinutes + 1)) +\n    startInMinutes;\n\n  const randomHour = Math.floor(randomMinute / 60);\n  const remainderMinute = randomMinute % 60;\n\n  // Create new Date object with random time\n  const randomDate = new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    randomHour,\n    remainderMinute,\n  );\n\n  // Adjust for time zone\n  const timezoneAdjustedDate = new Date(\n    randomDate.getTime() + timeZoneOffset * 60 * 1000,\n  );\n  return timezoneAdjustedDate;\n};\n"],"names":["formatDate","date","concat","getFullYear","getMonth","toString","padStart","getDate","startTime","endTime","_a","split","map","Number","startHour","startMinute","_b","endHour","endMinute","startDate","Date","getTime","getHours","getMinutes","currentDate","currentYear","currentMonth","start","end","timeZoneOffset","Object","prototype","call","isNaN","Error","timeRegex","test","startParts","endParts","length","undefined","startInMinutes","endInMinutes","randomMinute","Math","floor","random","randomHour","remainderMinute","randomDate","getUTCFullYear","getUTCMonth","getUTCDate","value"],"mappings":";;;;;oPAuBO,IAoEMA,EAAa,SAACC,GACzB,MAAO,GAAGC,OAAAD,EAAKE,cAAa,KAAAD,QAAKD,EAAKG,WAAa,GAChDC,WACAC,SAAS,EAAG,KAAQ,KAAAJ,OAAAD,EAAKM,UAAUF,WAAWC,SAAS,EAAG,KAC/D,sBAzBiC,SAC/BE,EACAC,GAEM,IAAAC,EAA2BF,EAAUG,MAAM,KAAKC,IAAIC,QAAnDC,OAAWC,OACZC,EAAuBP,EAAQE,MAAM,KAAKC,IAAIC,QAA7CI,OAASC,OAEVC,EAAY,IAAIC,KAAK,IAAM,EAAG,EAAGN,EAAWC,GAKlD,OAJgB,IAAIK,KAAK,IAAM,EAAG,EAAGH,EAASC,GAGnCG,UAAYF,EAAUE,WAAS,GAE5C,mCA8B+B,SAACpB,GAC9B,MAAO,UAAGA,EAAKqB,WAAWjB,WAAWC,SAAS,EAAG,iBAAQL,EACtDsB,aACAlB,WACAC,SAAS,EAAG,KACjB,wBAfmC,SAACL,GAClC,OAAOD,EAAWC,EACpB,wBAoBmC,WAIjC,IAAMuB,EAAc,IAAIJ,KAGxB,MAAO,CAAEK,YAFWD,EAAYrB,cAAcE,WAExBqB,cADAF,EAAYpB,WAAa,GAAGC,WAAWC,SAAS,EAAG,KAE3E,kBAW6B,SAC3BL,EACA0B,EACAC,EACAC,GAGA,QAHA,IAAAA,IAAAA,EAA4B,KAIe,kBAAzCC,OAAOC,UAAU1B,SAAS2B,KAAK/B,IAC/BgC,MAAMhC,EAAKoB,WAEX,MAAM,IAAIa,MAAM,iCAIlB,IAAMC,EAAY,+BAClB,IAAKA,EAAUC,KAAKT,KAAWQ,EAAUC,KAAKR,GAC5C,MAAM,IAAIM,MAAM,wCAGlB,IAAMG,EAAaV,EAAMhB,MAAM,KAAKC,IAAIC,QAClCyB,EAAWV,EAAIjB,MAAM,KAAKC,IAAIC,QAEpC,GAA0B,IAAtBwB,EAAWE,QAAoC,IAApBD,EAASC,OACtC,MAAM,IAAIL,MAAM,6CAGlB,IAAMpB,EAAYuB,EAAW,GACvBtB,EAAcsB,EAAW,GACzBpB,EAAUqB,EAAS,GACnBpB,EAAYoB,EAAS,GAG3B,QACgBE,IAAd1B,QACY0B,IAAZvB,QACgBuB,IAAhBzB,QACcyB,IAAdtB,GACAJ,EAAYG,GACXH,IAAcG,GAAWF,GAAeG,EAEzC,MAAM,IAAIgB,MAAM,uCAIlB,IAAMO,EAA6B,GAAZ3B,EAAiBC,EAClC2B,EAAyB,GAAVzB,EAAeC,EAG9ByB,EACJC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAeD,EAAiB,IAC5DA,EAEIM,EAAaH,KAAKC,MAAMF,EAAe,IACvCK,EAAkBL,EAAe,GAGjCM,EAAa,IAAI7B,KACrBnB,EAAKiD,iBACLjD,EAAKkD,cACLlD,EAAKmD,aACLL,EACAC,GAOF,OAH6B,IAAI5B,KAC/B6B,EAAW5B,UAA6B,GAAjBQ,EAAsB,IAGjD,aA5LmD,CACjD,aAAc,KACd,aAAc,QACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,KACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,2BArCiB,SAACwB,GAChC,OAACxC,OAAOoB,MAAMpB,OAAOwC,GAArB"}